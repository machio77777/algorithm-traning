#include <iostream>

using namespace std;

// 配列要素を順番に出力.
void trace(int A[], int N) {
    int i;
    for (i = 0; i < N; i++) {
        if (i > 0) {
            printf(" "); // 隣接要素の間に1つの空白を出力.
        }
        printf("%d", A[i]);
    }
    printf("\n");
}

// [挿入ソート]
// [ソート済みの部分列]と[未ソートの部分列]に分割.
// 先頭の要素はソート済みをみなす.
// 1. 未ソート部分の先頭から要素を1つ取り出しvに記録.
// 2. ソート済みの部分において、vより大きい要素を後方へ1つずつ移動.
// 3. 最後に空いた位置に「取り出した要素v」を挿入.
void insert(int A[], int N) {
    
    int i; // 未ソートの部分列の先頭を表すループ変数.
    int v; // A[i]の値を一時的に保持しておくための変数.
    int j; // ソート済み部分列からvを挿入するための位置を探すループ変数.
    
    // 先頭要素[0]はソート済みとみなすためi=1から開始.
    for (i = 1; i < N; i++) {
        // 未ソート部分の先頭要素[i]をvに一時保存.
        v = A[i];
        j = i - 1;
        // ソート済みの部分列の後方から大小比較を繰り返す.
        while (j >= 0 && A[j] > v) {
            A[j + 1] = A[j];
            j--;
        }
        A[j + 1] = v;
        trace(A, N);
    }
}


// 挿入ソート - [ソート済みの部分列]と[未ソートの部分列]に分割.
int main(int argc, char** argv) {
    
    int N = 10;
    int A[] = {17, 14, 4, 2, 5, 10, 7, 1, 6, 3};
    
    trace(A, N);
    
    // 挿入ソート処理.
    insert(A, N);
    
    return 0;
}


