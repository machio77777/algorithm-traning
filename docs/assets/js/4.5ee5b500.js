(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{170:function(t,e,s){t.exports=s.p+"assets/img/queue-1.e80bfb8c.png"},171:function(t,e,s){t.exports=s.p+"assets/img/queue-2.cb84996c.png"},190:function(t,e,s){"use strict";s.r(e);var a=[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"キュー"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#キュー","aria-hidden":"true"}},[t._v("#")]),t._v(" 📙 キュー.")]),t._v(" "),a("p",[t._v("📌"),a("strong",[t._v("キューの特徴.")])]),t._v(" "),a("ul",[a("li",[t._v("「待ち行列」とも呼ばれ、データの到着順に処理したい時に使用するデータ構造.")]),t._v(" "),a("li",[t._v("データの中で最初に入ったものが最初に取り出されるFIFOの原則に従ったデータ構造.")])]),t._v(" "),a("p",[t._v("📌"),a("strong",[t._v("キューの手順.")])]),t._v(" "),a("p",[t._v("1️⃣enqueue(x):キューの末尾に要素xを追加."),a("br"),t._v("\n2️⃣dequeue():キューの先頭から要素を取り出す."),a("br"),t._v("\n3️⃣isEmpty():キューが空かどうかを調べる."),a("br"),t._v("\n4️⃣isFull():キュー満杯かどうかを調べる.")]),t._v(" "),a("p",[t._v("追加と取り出しが繰り返されることで、headとtailに挟まれたデータ本体が末尾に向かって移動.")]),t._v(" "),a("img",{staticStyle:{width:"70%"},attrs:{src:s(170)}}),t._v(" "),a("p",[t._v("この操作を繰り返していると、tailとheadが配列の容量を超えてしまう.")]),t._v(" "),a("ul",[a("li",[t._v("tailが配列の領域を超えた時点でオーバーフローで追加を諦めると容量が勿体無い.")]),t._v(" "),a("li",[t._v("dequeue()実行の都度、headを常に0に保つよう配列を先頭に移動すると毎度計算量O(n)が必要.")])]),t._v(" "),a("p",[t._v("これを解決する方法が配列をリングバッファとみなしてデータを管理する方法.")]),t._v(" "),a("img",{staticStyle:{width:"70%"},attrs:{src:s(171)}}),t._v(" "),a("p",[t._v("🔎対象ソースは以下に格納.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// なし\n")])])])])}],i=s(0),_=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},a,!1,null,null,null);_.options.__file="index.md";e.default=_.exports}}]);